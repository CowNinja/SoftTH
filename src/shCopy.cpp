/*
SoftTH, Software multihead solution for Direct3D
Copyright (C) 2005-2012 Keijo Ruotsalainen, www.kegetys.fi

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// D3D Shader-copy

// Very old code

#include "shcopy.h"
#include "helper.h"

#include <d3dx9.h>

static void setDeviceDefaultState(IDirect3DDevice9 *d3dd);

struct TEXVERTEX {
    D3DXVECTOR4 p;
    FLOAT       u, v;
    FLOAT       u2, v2;
};
#define D3DFVF_TEXVERTEX (D3DFVF_XYZRHW|D3DFVF_TEX2)

const char ditherShaderSRC[] =
	"ps.1.3\n"
	"def c0, 0.0875, 0.0625, 0.0875, 0.0\n"
	"tex t0\n" // Image
	"tex t1\n" // Dither patter
	"texreg2rgb t2, t0\n" // Color map
	"mul r1, t2, t1_bias\n"
	"mad r0, r1, c0, t0\n";


// 256x1 pixel RGBA dither ramp 1D lookup texture
const static unsigned char ditherRamp[256*4] = {
    0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07,
    0x0D, 0x0D, 0x0D, 0x0A, 0x14, 0x0D, 0x0D, 0x0B,
    0x14, 0x14, 0x14, 0x0F, 0x19, 0x19, 0x19, 0x12,
    0x1F, 0x1F, 0x19, 0x15, 0x26, 0x26, 0x26, 0x1A,
    0x2C, 0x2C, 0x2C, 0x1E, 0x2C, 0x2C, 0x2C, 0x1E,
    0x33, 0x39, 0x39, 0x27, 0x3E, 0x3E, 0x3E, 0x2C,
    0x44, 0x3E, 0x44, 0x2E, 0x4A, 0x4A, 0x4A, 0x37,
    0x51, 0x4A, 0x4A, 0x38, 0x51, 0x57, 0x57, 0x40,
    0x5B, 0x5B, 0x5B, 0x45, 0x61, 0x67, 0x61, 0x4F,
    0x6C, 0x67, 0x6C, 0x52, 0x72, 0x6C, 0x6C, 0x57,
    0x76, 0x76, 0x72, 0x5F, 0x76, 0x7B, 0x7B, 0x63,
    0x81, 0x81, 0x81, 0x6A, 0x84, 0x84, 0x84, 0x6D,
    0x89, 0x89, 0x89, 0x73, 0x92, 0x92, 0x92, 0x7D,
    0x96, 0x96, 0x9B, 0x80, 0x9B, 0x9B, 0x9B, 0x86,
    0xA2, 0xA2, 0xA2, 0x8E, 0xA9, 0xA6, 0xA6, 0x93,
    0xA9, 0xA9, 0xAD, 0x96, 0xB3, 0xB0, 0xB0, 0x9E,
    0xB6, 0xB6, 0xB6, 0xA4, 0xB9, 0xB9, 0xB9, 0xA8,
    0xBC, 0xBF, 0xBC, 0xAE, 0xC1, 0xC1, 0xC1, 0xB1,
    0xC6, 0xC4, 0xC4, 0xB6, 0xC8, 0xC8, 0xC8, 0xB9,
    0xCB, 0xCB, 0xCB, 0xBE, 0xCD, 0xCF, 0xCD, 0xC2,
    0xD1, 0xD1, 0xD1, 0xC5, 0xD5, 0xD5, 0xD5, 0xC9,
    0xD6, 0xD6, 0xD6, 0xCB, 0xDA, 0xDA, 0xDA, 0xD0,
    0xDD, 0xDC, 0xDD, 0xD3, 0xDE, 0xDE, 0xDE, 0xD5,
    0xE1, 0xE1, 0xE1, 0xD9, 0xE3, 0xE3, 0xE2, 0xDB,
    0xE5, 0xE5, 0xE5, 0xDD, 0xE7, 0xE6, 0xE7, 0xDF,
    0xE7, 0xE7, 0xE8, 0xE0, 0xE9, 0xE9, 0xE9, 0xE3,
    0xEB, 0xEA, 0xEB, 0xE4, 0xEC, 0xEC, 0xEC, 0xE6,
    0xED, 0xED, 0xED, 0xE8, 0xEF, 0xEE, 0xEF, 0xE9,
    0xEF, 0xEF, 0xEF, 0xEA, 0xF1, 0xF1, 0xF1, 0xED,
    0xF2, 0xF2, 0xF2, 0xEE, 0xF2, 0xF2, 0xF2, 0xEE,
    0xF3, 0xF3, 0xF3, 0xEF, 0xF4, 0xF4, 0xF4, 0xF0,
    0xF5, 0xF5, 0xF5, 0xF2, 0xF5, 0xF5, 0xF5, 0xF1,
    0xF6, 0xF6, 0xF6, 0xF3, 0xF6, 0xF6, 0xF6, 0xF3,
    0xF7, 0xF7, 0xF7, 0xF4, 0xF7, 0xF7, 0xF7, 0xF4,
    0xF8, 0xF8, 0xF8, 0xF6, 0xF8, 0xF8, 0xF8, 0xF6,
    0xF9, 0xF8, 0xF8, 0xF6, 0xF9, 0xF9, 0xF9, 0xF7,
    0xF9, 0xF9, 0xF9, 0xF7, 0xFA, 0xFA, 0xFA, 0xF9,
    0xFA, 0xFA, 0xFA, 0xF8, 0xFA, 0xFA, 0xFA, 0xF9,
    0xFA, 0xFA, 0xFA, 0xF8, 0xFB, 0xFB, 0xFB, 0xFA,
    0xFB, 0xFB, 0xFB, 0xFA, 0xFB, 0xFB, 0xFB, 0xF9,
    0xFB, 0xFB, 0xFB, 0xFA, 0xFC, 0xFC, 0xFC, 0xFB,
    0xFC, 0xFC, 0xFC, 0xFB, 0xFC, 0xFC, 0xFC, 0xFB,
    0xFC, 0xFC, 0xFC, 0xFB, 0xFC, 0xFC, 0xFC, 0xFB,
    0xFC, 0xFC, 0xFC, 0xFB, 0xFD, 0xFD, 0xFD, 0xFC,
    0xFD, 0xFD, 0xFD, 0xFC, 0xFD, 0xFD, 0xFD, 0xFC,
    0xFD, 0xFD, 0xFD, 0xFC, 0xFD, 0xFD, 0xFD, 0xFC,
    0xFD, 0xFD, 0xFD, 0xFC, 0xFE, 0xFE, 0xFE, 0xFE,
    0xFE, 0xFE, 0xFE, 0xFD, 0xFE, 0xFE, 0xFE, 0xFD,
    0xFE, 0xFE, 0xFE, 0xFD, 0xFE, 0xFE, 0xFE, 0xFD,
    0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFD,
    0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFD,
    0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFD,
    0xFE, 0xFE, 0xFE, 0xFD, 0xFE, 0xFE, 0xFE, 0xFE,
    0xFE, 0xFE, 0xFE, 0xFD, 0xFE, 0xFE, 0xFE, 0xFE,
    0xFE, 0xFE, 0xFE, 0xFD, 0xFE, 0xFE, 0xFE, 0xFD,
    0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFD,
    0xFE, 0xFE, 0xFE, 0xFD, 0xFE, 0xFE, 0xFE, 0xFD,
    0xFD, 0xFD, 0xFD, 0xFC, 0xFD, 0xFD, 0xFD, 0xFC,
    0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFC,
    0xFD, 0xFD, 0xFD, 0xFC, 0xFD, 0xFD, 0xFD, 0xFC,
    0xFC, 0xFC, 0xFC, 0xFB, 0xFC, 0xFC, 0xFC, 0xFB,
    0xFC, 0xFC, 0xFC, 0xFB, 0xFC, 0xFC, 0xFC, 0xFB,
    0xFC, 0xFC, 0xFC, 0xFB, 0xFC, 0xFB, 0xFB, 0xFA,
    0xFB, 0xFB, 0xFB, 0xFA, 0xFB, 0xFB, 0xFB, 0xFA,
    0xFB, 0xFB, 0xFB, 0xFA, 0xFB, 0xFB, 0xFB, 0xF9,
    0xFA, 0xFA, 0xFA, 0xF8, 0xFA, 0xFA, 0xFA, 0xF9,
    0xFA, 0xFA, 0xFA, 0xF9, 0xFA, 0xFA, 0xF9, 0xF8,
    0xF9, 0xF9, 0xF9, 0xF7, 0xF9, 0xF9, 0xF9, 0xF7,
    0xF8, 0xF8, 0xF8, 0xF6, 0xF8, 0xF8, 0xF8, 0xF5,
    0xF8, 0xF8, 0xF8, 0xF6, 0xF7, 0xF7, 0xF7, 0xF4,
    0xF7, 0xF7, 0xF7, 0xF5, 0xF6, 0xF7, 0xF6, 0xF4,
    0xF6, 0xF6, 0xF6, 0xF3, 0xF5, 0xF5, 0xF5, 0xF2,
    0xF5, 0xF5, 0xF5, 0xF2, 0xF4, 0xF4, 0xF4, 0xF1,
    0xF3, 0xF3, 0xF3, 0xF0, 0xF2, 0xF2, 0xF2, 0xEE,
    0xF2, 0xF2, 0xF2, 0xEF, 0xF1, 0xF1, 0xF1, 0xED,
    0xF0, 0xEF, 0xF0, 0xEA, 0xEF, 0xEF, 0xEE, 0xEA,
    0xED, 0xED, 0xEE, 0xE8, 0xED, 0xEC, 0xEC, 0xE7,
    0xEA, 0xEA, 0xEB, 0xE4, 0xE9, 0xE9, 0xE9, 0xE3,
    0xE7, 0xE7, 0xE8, 0xE0, 0xE7, 0xE6, 0xE7, 0xE0,
    0xE5, 0xE5, 0xE5, 0xDE, 0xE2, 0xE2, 0xE2, 0xDA,
    0xE1, 0xE1, 0xE1, 0xD9, 0xDE, 0xDE, 0xDE, 0xD5,
    0xDD, 0xDD, 0xDC, 0xD3, 0xDA, 0xDA, 0xDA, 0xD0,
    0xD6, 0xD6, 0xD9, 0xCB, 0xD5, 0xD5, 0xD5, 0xC9,
    0xD1, 0xD1, 0xD1, 0xC4, 0xCD, 0xCF, 0xCF, 0xC2,
    0xCB, 0xCB, 0xCB, 0xBD, 0xC8, 0xC8, 0xC6, 0xB9,
    0xC4, 0xC4, 0xC4, 0xB5, 0xBF, 0xC1, 0xC1, 0xB1,
    0xBC, 0xBF, 0xBC, 0xAE, 0xB9, 0xB9, 0xB9, 0xA8,
    0xB3, 0xB3, 0xB3, 0xA1, 0xB0, 0xB0, 0xB0, 0x9D,
    0xAD, 0xA9, 0xAD, 0x97, 0xA6, 0xA6, 0xA6, 0x93,
    0xA2, 0xA2, 0x9E, 0x8D, 0x9B, 0x9B, 0x9E, 0x86,
    0x96, 0x9B, 0x96, 0x84, 0x92, 0x92, 0x92, 0x7C,
    0x89, 0x89, 0x8E, 0x73, 0x84, 0x89, 0x84, 0x71,
    0x81, 0x81, 0x84, 0x6B, 0x7B, 0x7B, 0x7B, 0x65,
    0x76, 0x76, 0x72, 0x5F, 0x6C, 0x72, 0x6C, 0x5A,
    0x6C, 0x67, 0x67, 0x52, 0x61, 0x61, 0x61, 0x4B,
    0x5B, 0x5B, 0x5B, 0x45, 0x57, 0x57, 0x57, 0x42,
    0x51, 0x51, 0x51, 0x3C, 0x44, 0x4A, 0x4A, 0x35,
    0x44, 0x3E, 0x3E, 0x2E, 0x39, 0x3E, 0x3E, 0x2B,
    0x39, 0x39, 0x39, 0x28, 0x2C, 0x33, 0x33, 0x23,
    0x26, 0x2C, 0x2C, 0x1E, 0x26, 0x1F, 0x1F, 0x16,
    0x1F, 0x1F, 0x1F, 0x16, 0x19, 0x19, 0x19, 0x12,
    0x14, 0x14, 0x14, 0x0F, 0x14, 0x14, 0x14, 0x0F,
    0x0D, 0x0D, 0x0D, 0x0B, 0x07, 0x07, 0x00, 0x07,
};

// 16x16 pixel RGBA dithering mask
#define DITHERMASKWIDTH		16
#define DITHERMASKHEIGHT	16
#define DITHERMASKSIZE		DITHERMASKWIDTH	* DITHERMASKHEIGHT * 4
const static unsigned char ditherMask[DITHERMASKSIZE] = {
    0x7A, 0x7B, 0x80, 0x00, 0x69, 0x18, 0x62, 0x00,
    0xAE, 0x7F, 0xC0, 0x00, 0x67, 0x56, 0x59, 0x00,
    0x72, 0x84, 0x8A, 0x00, 0x6D, 0x27, 0x5C, 0x00,
    0xA5, 0x7C, 0xB2, 0x00, 0x68, 0x5F, 0x5C, 0x00,
    0x7A, 0x7B, 0x80, 0x00, 0x69, 0x18, 0x62, 0x00,
    0xAE, 0x7F, 0xC0, 0x00, 0x67, 0x56, 0x59, 0x00,
    0x72, 0x84, 0x8A, 0x00, 0x6D, 0x27, 0x5C, 0x00,
    0xA5, 0x7C, 0xB2, 0x00, 0x68, 0x5F, 0x5C, 0x00,
    0x62, 0x68, 0x5F, 0x00, 0x73, 0x7A, 0x7B, 0x00,
    0x2E, 0x69, 0x18, 0x00, 0x75, 0xAE, 0x7F, 0x00,
    0x6A, 0x67, 0x56, 0x00, 0x6F, 0x72, 0x84, 0x00,
    0x37, 0x6D, 0x27, 0x00, 0x74, 0xA5, 0x7C, 0x00,
    0x62, 0x68, 0x5F, 0x00, 0x73, 0x7A, 0x7B, 0x00,
    0x2E, 0x69, 0x18, 0x00, 0x75, 0xAE, 0x7F, 0x00,
    0x6A, 0x67, 0x56, 0x00, 0x6F, 0x72, 0x84, 0x00,
    0x37, 0x6D, 0x27, 0x00, 0x74, 0xA5, 0x7C, 0x00,
    0xBA, 0x74, 0xA5, 0x00, 0x5B, 0x62, 0x68, 0x00,
    0x86, 0x73, 0x7A, 0x00, 0x5F, 0x2E, 0x69, 0x00,
    0xC2, 0x75, 0xAE, 0x00, 0x58, 0x6A, 0x67, 0x00,
    0x8C, 0x6F, 0x72, 0x00, 0x5B, 0x37, 0x6D, 0x00,
    0xBA, 0x74, 0xA5, 0x00, 0x5B, 0x62, 0x68, 0x00,
    0x86, 0x73, 0x7A, 0x00, 0x5F, 0x2E, 0x69, 0x00,
    0xC2, 0x75, 0xAE, 0x00, 0x58, 0x6A, 0x67, 0x00,
    0x8C, 0x6F, 0x72, 0x00, 0x5B, 0x37, 0x6D, 0x00,
    0x1E, 0x5B, 0x37, 0x00, 0x7E, 0xBA, 0x74, 0x00,
    0x5A, 0x5B, 0x62, 0x00, 0x81, 0x86, 0x73, 0x00,
    0x16, 0x5F, 0x2E, 0x00, 0x80, 0xC2, 0x75, 0x00,
    0x55, 0x58, 0x6A, 0x00, 0x86, 0x8C, 0x6F, 0x00,
    0x1E, 0x5B, 0x37, 0x00, 0x7E, 0xBA, 0x74, 0x00,
    0x5A, 0x5B, 0x62, 0x00, 0x81, 0x86, 0x73, 0x00,
    0x16, 0x5F, 0x2E, 0x00, 0x80, 0xC2, 0x75, 0x00,
    0x55, 0x58, 0x6A, 0x00, 0x86, 0x8C, 0x6F, 0x00,
    0x75, 0x86, 0x8C, 0x00, 0x6B, 0x1E, 0x5B, 0x00,
    0xA9, 0x7E, 0xBA, 0x00, 0x67, 0x5A, 0x5B, 0x00,
    0x7D, 0x81, 0x86, 0x00, 0x68, 0x16, 0x5F, 0x00,
    0xB3, 0x80, 0xC2, 0x00, 0x65, 0x55, 0x58, 0x00,
    0x75, 0x86, 0x8C, 0x00, 0x6B, 0x1E, 0x5B, 0x00,
    0xA9, 0x7E, 0xBA, 0x00, 0x67, 0x5A, 0x5B, 0x00,
    0x7D, 0x81, 0x86, 0x00, 0x68, 0x16, 0x5F, 0x00,
    0xB3, 0x80, 0xC2, 0x00, 0x65, 0x55, 0x58, 0x00,
    0x67, 0x65, 0x55, 0x00, 0x71, 0x75, 0x86, 0x00,
    0x32, 0x6B, 0x1E, 0x00, 0x74, 0xA9, 0x7E, 0x00,
    0x5F, 0x67, 0x5A, 0x00, 0x74, 0x7D, 0x81, 0x00,
    0x28, 0x68, 0x16, 0x00, 0x76, 0xB3, 0x80, 0x00,
    0x67, 0x65, 0x55, 0x00, 0x71, 0x75, 0x86, 0x00,
    0x32, 0x6B, 0x1E, 0x00, 0x74, 0xA9, 0x7E, 0x00,
    0x5F, 0x67, 0x5A, 0x00, 0x74, 0x7D, 0x81, 0x00,
    0x28, 0x68, 0x16, 0x00, 0x76, 0xB3, 0x80, 0x00,
    0xC0, 0x76, 0xB3, 0x00, 0x59, 0x67, 0x65, 0x00,
    0x8A, 0x71, 0x75, 0x00, 0x5C, 0x32, 0x6B, 0x00,
    0xB2, 0x74, 0xA9, 0x00, 0x5C, 0x5F, 0x67, 0x00,
    0x80, 0x74, 0x7D, 0x00, 0x62, 0x28, 0x68, 0x00,
    0xC0, 0x76, 0xB3, 0x00, 0x59, 0x67, 0x65, 0x00,
    0x8A, 0x71, 0x75, 0x00, 0x5C, 0x32, 0x6B, 0x00,
    0xB2, 0x74, 0xA9, 0x00, 0x5C, 0x5F, 0x67, 0x00,
    0x80, 0x74, 0x7D, 0x00, 0x62, 0x28, 0x68, 0x00,
    0x18, 0x62, 0x28, 0x00, 0x7F, 0xC0, 0x76, 0x00,
    0x56, 0x59, 0x67, 0x00, 0x84, 0x8A, 0x71, 0x00,
    0x27, 0x5C, 0x32, 0x00, 0x7C, 0xB2, 0x74, 0x00,
    0x5F, 0x5C, 0x5F, 0x00, 0x7B, 0x80, 0x74, 0x00,
    0x18, 0x62, 0x28, 0x00, 0x7F, 0xC0, 0x76, 0x00,
    0x56, 0x59, 0x67, 0x00, 0x84, 0x8A, 0x71, 0x00,
    0x27, 0x5C, 0x32, 0x00, 0x7C, 0xB2, 0x74, 0x00,
    0x5F, 0x5C, 0x5F, 0x00, 0x7B, 0x80, 0x74, 0x00,
    0x7A, 0x7B, 0x80, 0x00, 0x69, 0x18, 0x62, 0x00,
    0xAE, 0x7F, 0xC0, 0x00, 0x67, 0x56, 0x59, 0x00,
    0x72, 0x84, 0x8A, 0x00, 0x6D, 0x27, 0x5C, 0x00,
    0xA5, 0x7C, 0xB2, 0x00, 0x68, 0x5F, 0x5C, 0x00,
    0x7A, 0x7B, 0x80, 0x00, 0x69, 0x18, 0x62, 0x00,
    0xAE, 0x7F, 0xC0, 0x00, 0x67, 0x56, 0x59, 0x00,
    0x72, 0x84, 0x8A, 0x00, 0x6D, 0x27, 0x5C, 0x00,
    0xA5, 0x7C, 0xB2, 0x00, 0x68, 0x5F, 0x5C, 0x00,
    0x62, 0x68, 0x5F, 0x00, 0x73, 0x7A, 0x7B, 0x00,
    0x2E, 0x69, 0x18, 0x00, 0x75, 0xAE, 0x7F, 0x00,
    0x6A, 0x67, 0x56, 0x00, 0x6F, 0x72, 0x84, 0x00,
    0x37, 0x6D, 0x27, 0x00, 0x74, 0xA5, 0x7C, 0x00,
    0x62, 0x68, 0x5F, 0x00, 0x73, 0x7A, 0x7B, 0x00,
    0x2E, 0x69, 0x18, 0x00, 0x75, 0xAE, 0x7F, 0x00,
    0x6A, 0x67, 0x56, 0x00, 0x6F, 0x72, 0x84, 0x00,
    0x37, 0x6D, 0x27, 0x00, 0x74, 0xA5, 0x7C, 0x00,
    0xBA, 0x74, 0xA5, 0x00, 0x5B, 0x62, 0x68, 0x00,
    0x86, 0x73, 0x7A, 0x00, 0x5F, 0x2E, 0x69, 0x00,
    0xC2, 0x75, 0xAE, 0x00, 0x58, 0x6A, 0x67, 0x00,
    0x8C, 0x6F, 0x72, 0x00, 0x5B, 0x37, 0x6D, 0x00,
    0xBA, 0x74, 0xA5, 0x00, 0x5B, 0x62, 0x68, 0x00,
    0x86, 0x73, 0x7A, 0x00, 0x5F, 0x2E, 0x69, 0x00,
    0xC2, 0x75, 0xAE, 0x00, 0x58, 0x6A, 0x67, 0x00,
    0x8C, 0x6F, 0x72, 0x00, 0x5B, 0x37, 0x6D, 0x00,
    0x1E, 0x5B, 0x37, 0x00, 0x7E, 0xBA, 0x74, 0x00,
    0x5A, 0x5B, 0x62, 0x00, 0x81, 0x86, 0x73, 0x00,
    0x16, 0x5F, 0x2E, 0x00, 0x80, 0xC2, 0x75, 0x00,
    0x55, 0x58, 0x6A, 0x00, 0x86, 0x8C, 0x6F, 0x00,
    0x1E, 0x5B, 0x37, 0x00, 0x7E, 0xBA, 0x74, 0x00,
    0x5A, 0x5B, 0x62, 0x00, 0x81, 0x86, 0x73, 0x00,
    0x16, 0x5F, 0x2E, 0x00, 0x80, 0xC2, 0x75, 0x00,
    0x55, 0x58, 0x6A, 0x00, 0x86, 0x8C, 0x6F, 0x00,
    0x75, 0x86, 0x8C, 0x00, 0x6B, 0x1E, 0x5B, 0x00,
    0xA9, 0x7E, 0xBA, 0x00, 0x67, 0x5A, 0x5B, 0x00,
    0x7D, 0x81, 0x86, 0x00, 0x68, 0x16, 0x5F, 0x00,
    0xB3, 0x80, 0xC2, 0x00, 0x65, 0x55, 0x58, 0x00,
    0x75, 0x86, 0x8C, 0x00, 0x6B, 0x1E, 0x5B, 0x00,
    0xA9, 0x7E, 0xBA, 0x00, 0x67, 0x5A, 0x5B, 0x00,
    0x7D, 0x81, 0x86, 0x00, 0x68, 0x16, 0x5F, 0x00,
    0xB3, 0x80, 0xC2, 0x00, 0x65, 0x55, 0x58, 0x00,
    0x67, 0x65, 0x55, 0x00, 0x71, 0x75, 0x86, 0x00,
    0x32, 0x6B, 0x1E, 0x00, 0x74, 0xA9, 0x7E, 0x00,
    0x5F, 0x67, 0x5A, 0x00, 0x74, 0x7D, 0x81, 0x00,
    0x28, 0x68, 0x16, 0x00, 0x76, 0xB3, 0x80, 0x00,
    0x67, 0x65, 0x55, 0x00, 0x71, 0x75, 0x86, 0x00,
    0x32, 0x6B, 0x1E, 0x00, 0x74, 0xA9, 0x7E, 0x00,
    0x5F, 0x67, 0x5A, 0x00, 0x74, 0x7D, 0x81, 0x00,
    0x28, 0x68, 0x16, 0x00, 0x76, 0xB3, 0x80, 0x00,
    0xC0, 0x76, 0xB3, 0x00, 0x59, 0x67, 0x65, 0x00,
    0x8A, 0x71, 0x75, 0x00, 0x5C, 0x32, 0x6B, 0x00,
    0xB2, 0x74, 0xA9, 0x00, 0x5C, 0x5F, 0x67, 0x00,
    0x80, 0x74, 0x7D, 0x00, 0x62, 0x28, 0x68, 0x00,
    0xC0, 0x76, 0xB3, 0x00, 0x59, 0x67, 0x65, 0x00,
    0x8A, 0x71, 0x75, 0x00, 0x5C, 0x32, 0x6B, 0x00,
    0xB2, 0x74, 0xA9, 0x00, 0x5C, 0x5F, 0x67, 0x00,
    0x80, 0x74, 0x7D, 0x00, 0x62, 0x28, 0x68, 0x00,
    0x18, 0x62, 0x28, 0x00, 0x7F, 0xC0, 0x76, 0x00,
    0x56, 0x59, 0x67, 0x00, 0x84, 0x8A, 0x71, 0x00,
    0x27, 0x5C, 0x32, 0x00, 0x7C, 0xB2, 0x74, 0x00,
    0x5F, 0x5C, 0x5F, 0x00, 0x7B, 0x80, 0x74, 0x00,
    0x18, 0x62, 0x28, 0x00, 0x7F, 0xC0, 0x76, 0x00,
    0x56, 0x59, 0x67, 0x00, 0x84, 0x8A, 0x71, 0x00,
    0x27, 0x5C, 0x32, 0x00, 0x7C, 0xB2, 0x74, 0x00,
    0x5F, 0x5C, 0x5F, 0x00, 0x7B, 0x80, 0x74, 0x00,
};

bool shCopy::createTextureFromRawData(void *src, int width, int height, int bpp, D3DFORMAT fmt, IDirect3DTexture9 **tex)
{
  IDirect3DTexture9 *tmpTex;
  D3DCALL( dev->CreateTexture(width, height, 1, NULL, fmt, D3DPOOL_DEFAULT, tex, NULL) );
  D3DCALL( dev->CreateTexture(width, height, 1, NULL, fmt, D3DPOOL_SYSTEMMEM, &tmpTex, NULL) );

  D3DLOCKED_RECT lr;
  D3DCALL( tmpTex->LockRect(0, &lr, NULL, NULL) );
  if(lr.Pitch != width*bpp)
    dbg("WARNING: createTextureFromRawData: pitch (%d) != width (%d)", lr.Pitch, width*bpp);
  memcpy(lr.pBits, src, width*height*bpp);
  tmpTex->UnlockRect(0);

  D3DCALL( dev->UpdateTexture(tmpTex, *tex) );
  tmpTex->Release();

  return true;
}

shCopy::shCopy(IDirect3DDevice9 *device, char *shaderSrc)
{
  isDither = false;
  texDither = NULL;
  texDitherRamp = NULL;

  if(!strcmp(shaderSrc, SHCOPY_DITHER))
    isDither = true;  // Special dithering copy

  // Create shader and capture default device state
  dev = device;
  LPD3DXBUFFER code;
  LPD3DXBUFFER err;

  if(!isDither)
  {
    // Compile source shader
    if( D3DXCompileShaderFromFile(shaderSrc, NULL, NULL, "main", "ps_2_0", 0, &code, &err, NULL) != D3D_OK ) {
      dbg("Shader output: <%s>", err->GetBufferPointer());
      exit(0);
    }
  } else {
    // Assemble dither shader
    if( D3DXAssembleShader(ditherShaderSRC, (UINT)strlen(ditherShaderSRC)+1, NULL, NULL, NULL, &code, &err) != D3D_OK ) {
      dbg("Shader output: <%s>", err->GetBufferPointer());
      exit(0);
    }

    // Create dither textures
    createTextureFromRawData((void*)ditherMask, DITHERMASKWIDTH, DITHERMASKHEIGHT, 4, D3DFMT_A8R8G8B8, &texDither);
    createTextureFromRawData((void*)ditherRamp, 256, 1, 4, D3DFMT_A8R8G8B8, &texDitherRamp);
  }

  D3DCALL( dev->CreatePixelShader((DWORD*)code->GetBufferPointer(), &pshader) );
  code->Release();

  // Store current state...
  IDirect3DStateBlock9 *tmp;
  D3DCALL( dev->CreateStateBlock(D3DSBT_ALL, &tmp) );
  tmp->Capture();

  // Set default state...
  setDeviceDefaultState(dev);

  // Store default state for later use
  D3DCALL( dev->CreateStateBlock(D3DSBT_ALL, &defaultState) );
  defaultState->Capture();

  // Restore original state
  tmp->Apply();
  tmp->Release();
}

shCopy::~shCopy()
{
  pshader->Release();
  defaultState->Release();

  if(texDither)
    texDither->Release();
  if(texDitherRamp)
    texDitherRamp->Release();
}

bool shCopy::surfCopyShader(IDirect3DTexture9 *src, IDirect3DTexture9 *dst)
{
  IDirect3DSurface9 *surf;
  dst->GetSurfaceLevel(0, &surf);
  surfCopyShader(src, surf);
  surf->Release();
  return true;
}

bool shCopy::surfCopyShader(IDirect3DTexture9 *src, IDirect3DSurface9 *dst)
{
  // Store device state & apply default state
  if(dev->CreateStateBlock(D3DSBT_ALL, &sblock) != D3D_OK)
    return false;
  sblock->Capture();
  defaultState->Apply();

  dev->BeginScene();

  D3DSURFACE_DESC dstDesc;
  dst->GetDesc(&dstDesc);

  float w = (float) dstDesc.Width;
  float h = (float) dstDesc.Height;

  D3DCALL( dev->SetRenderState(D3DRS_LIGHTING, FALSE) );
  D3DCALL( dev->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE) );
  D3DCALL( dev->SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE) );
  D3DCALL( dev->SetRenderState(D3DRS_ZENABLE, FALSE) );

  float xx = 1.0;
  const int numVertex = 4;
  TEXVERTEX vdata[numVertex] = {
    D3DXVECTOR4(w,0,0,0.1f), xx, 0,  w/(float)DITHERMASKWIDTH, 0,
    D3DXVECTOR4(w,h,0,0.1f), xx, 1,  w/(float)DITHERMASKWIDTH, h/(float)DITHERMASKHEIGHT,
    D3DXVECTOR4(0,0,0,0.1f), 0,  0,  0, 0,
    D3DXVECTOR4(0,h,0,0.1f), 0,  1,  0, h/(float)DITHERMASKHEIGHT,
  };

  // Apply half-texel offsets to tex coordinates
  float htx = (float) (1.0/w/2.0);
  float hty = (float) (1.0/h/2.0);
  for(int i=0;i<numVertex;i++) {
    vdata[i].u  += htx; vdata[i].v += hty;
    vdata[i].u2 += htx; vdata[i].v2 += hty;
  }

  IDirect3DSurface9 *rtgt = NULL, *rdepth = NULL;
  D3DCALL( dev->GetRenderTarget(0, &rtgt) );
  dev->GetDepthStencilSurface(&rdepth);

  D3DCALL( dev->SetPixelShader(pshader) );
  D3DCALL( dev->SetRenderTarget(0, dst) );
  D3DCALL( dev->SetDepthStencilSurface(NULL) );
  D3DCALL( dev->SetTexture(0, src) );
  D3DCALL( dev->SetFVF(D3DFVF_TEXVERTEX) );
  if(isDither) {
		dev->SetTexture(1, texDither);
		dev->SetTextureStageState(1, D3DTSS_TEXCOORDINDEX, 1);
		dev->SetTexture(2, texDitherRamp);
		dev->SetTextureStageState(2, D3DTSS_TEXCOORDINDEX, 1);
  }
  dev->SetSamplerState(0, D3DSAMP_MAGFILTER, D3DTEXF_LINEAR);
  dev->SetSamplerState(0, D3DSAMP_MIPFILTER, D3DTEXF_LINEAR);
  dev->SetSamplerState(0, D3DSAMP_MINFILTER, D3DTEXF_LINEAR);
  dev->SetSamplerState(1, D3DSAMP_MAGFILTER, D3DTEXF_POINT);
  dev->SetSamplerState(1, D3DSAMP_MIPFILTER, D3DTEXF_POINT);
  dev->SetSamplerState(1, D3DSAMP_MINFILTER, D3DTEXF_POINT);
  dev->SetSamplerState(2, D3DSAMP_MAGFILTER, D3DTEXF_POINT);
  dev->SetSamplerState(2, D3DSAMP_MIPFILTER, D3DTEXF_POINT);
  dev->SetSamplerState(2, D3DSAMP_MINFILTER, D3DTEXF_POINT);

  D3DCALL( dev->DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, numVertex-2, vdata, sizeof(TEXVERTEX)) );

  if(rtgt) {
    D3DCALL( dev->SetRenderTarget(0, rtgt) );
    rtgt->Release();
  }
  if(rdepth) {
    D3DCALL( dev->SetDepthStencilSurface(rdepth) );
    rdepth->Release();
  }

  dev->EndScene();

  // Restore device state
  sblock->Apply();
  sblock->Release();
  return true;
}


static void setDeviceDefaultState(IDirect3DDevice9 *d3dd)
{
	// Hey ho, ugly pos
	float zerof = 0.0f;
	float onef = 1.0f;
#define ZEROf	*((DWORD*) (&zerof))
#define ONEf	*((DWORD*) (&zerof))

	d3dd->SetRenderState(D3DRS_ZENABLE, D3DZB_FALSE);
	d3dd->SetRenderState(D3DRS_FILLMODE, D3DFILL_SOLID);
	d3dd->SetRenderState(D3DRS_SHADEMODE, D3DSHADE_GOURAUD);
	d3dd->SetRenderState(D3DRS_ZWRITEENABLE, TRUE);
	d3dd->SetRenderState(D3DRS_ALPHATESTENABLE, FALSE);
	d3dd->SetRenderState(D3DRS_LASTPIXEL, TRUE);
	d3dd->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_ONE);
	d3dd->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_ZERO);
	d3dd->SetRenderState(D3DRS_CULLMODE, D3DCULL_CCW);
	d3dd->SetRenderState(D3DRS_ZFUNC, D3DCMP_LESSEQUAL);
	d3dd->SetRenderState(D3DRS_ALPHAREF, 0);
	d3dd->SetRenderState(D3DRS_ALPHAFUNC, D3DCMP_ALWAYS);
	d3dd->SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);
	d3dd->SetRenderState(D3DRS_FOGENABLE, FALSE);
	d3dd->SetRenderState(D3DRS_SPECULARENABLE, FALSE);
	d3dd->SetRenderState(D3DRS_FOGCOLOR, 0);
	d3dd->SetRenderState(D3DRS_FOGTABLEMODE, D3DFOG_NONE);
	d3dd->SetRenderState(D3DRS_FOGSTART, ZEROf);
	d3dd->SetRenderState(D3DRS_FOGEND, ONEf);
	d3dd->SetRenderState(D3DRS_FOGDENSITY, ONEf);
	d3dd->SetRenderState(D3DRS_RANGEFOGENABLE, FALSE);
	d3dd->SetRenderState(D3DRS_STENCILENABLE, FALSE);
	d3dd->SetRenderState(D3DRS_STENCILFAIL, D3DSTENCILOP_KEEP);
	d3dd->SetRenderState(D3DRS_STENCILZFAIL, D3DSTENCILOP_KEEP);
	d3dd->SetRenderState(D3DRS_STENCILPASS, D3DSTENCILOP_KEEP);
	d3dd->SetRenderState(D3DRS_STENCILFUNC, D3DCMP_ALWAYS);
	d3dd->SetRenderState(D3DRS_STENCILREF, 0);
	d3dd->SetRenderState(D3DRS_STENCILMASK, 0xffffffff);
	d3dd->SetRenderState(D3DRS_STENCILWRITEMASK, 0xffffffff);
	d3dd->SetRenderState(D3DRS_TEXTUREFACTOR, 0xffffffff);
	d3dd->SetRenderState(D3DRS_WRAP0, 0);
	d3dd->SetRenderState(D3DRS_WRAP1, 0);
	d3dd->SetRenderState(D3DRS_WRAP2, 0);
	d3dd->SetRenderState(D3DRS_WRAP3, 0);
	d3dd->SetRenderState(D3DRS_WRAP4, 0);
	d3dd->SetRenderState(D3DRS_WRAP5, 0);
	d3dd->SetRenderState(D3DRS_WRAP6, 0);
	d3dd->SetRenderState(D3DRS_WRAP7, 0);
	d3dd->SetRenderState(D3DRS_CLIPPING, TRUE);
	d3dd->SetRenderState(D3DRS_AMBIENT, 0);
	d3dd->SetRenderState(D3DRS_LIGHTING, TRUE);
	d3dd->SetRenderState(D3DRS_FOGVERTEXMODE, D3DFOG_NONE);
	d3dd->SetRenderState(D3DRS_COLORVERTEX, TRUE);
	d3dd->SetRenderState(D3DRS_LOCALVIEWER, TRUE);
	d3dd->SetRenderState(D3DRS_NORMALIZENORMALS, FALSE);
	d3dd->SetRenderState(D3DRS_DIFFUSEMATERIALSOURCE, D3DMCS_COLOR1);
	d3dd->SetRenderState(D3DRS_SPECULARMATERIALSOURCE, D3DMCS_COLOR2);
	d3dd->SetRenderState(D3DRS_AMBIENTMATERIALSOURCE, D3DMCS_MATERIAL);
	d3dd->SetRenderState(D3DRS_EMISSIVEMATERIALSOURCE, D3DMCS_MATERIAL);
	d3dd->SetRenderState(D3DRS_CLIPPLANEENABLE, 0);
	d3dd->SetRenderState(D3DRS_POINTSIZE_MIN, ONEf);
	d3dd->SetRenderState(D3DRS_POINTSPRITEENABLE, FALSE);
	d3dd->SetRenderState(D3DRS_MULTISAMPLEANTIALIAS, TRUE);
	d3dd->SetRenderState(D3DRS_MULTISAMPLEMASK, 0xffffffff);
	d3dd->SetRenderState(D3DRS_PATCHEDGESTYLE, D3DPATCHEDGE_DISCRETE);
	d3dd->SetRenderState(D3DRS_POINTSIZE_MAX, ONEf);
	d3dd->SetRenderState(D3DRS_COLORWRITEENABLE, 0x0000000f);
	d3dd->SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD);
	d3dd->SetRenderState(D3DRS_POSITIONDEGREE, D3DDEGREE_CUBIC);
	d3dd->SetRenderState(D3DRS_NORMALDEGREE, D3DDEGREE_LINEAR);
	d3dd->SetRenderState(D3DRS_SCISSORTESTENABLE, FALSE);
	d3dd->SetRenderState(D3DRS_SLOPESCALEDEPTHBIAS, 0);
	d3dd->SetRenderState(D3DRS_MINTESSELLATIONLEVEL, ONEf);
	d3dd->SetRenderState(D3DRS_MAXTESSELLATIONLEVEL, ONEf);
	d3dd->SetRenderState(D3DRS_ADAPTIVETESS_X, ZEROf);
	d3dd->SetRenderState(D3DRS_ADAPTIVETESS_Y, ZEROf);
	d3dd->SetRenderState(D3DRS_ADAPTIVETESS_Z, ONEf);
	d3dd->SetRenderState(D3DRS_ADAPTIVETESS_W, ZEROf);
	d3dd->SetRenderState(D3DRS_ENABLEADAPTIVETESSELLATION, FALSE);
	d3dd->SetRenderState(D3DRS_TWOSIDEDSTENCILMODE, FALSE);
	d3dd->SetRenderState(D3DRS_CCW_STENCILFAIL, D3DSTENCILOP_KEEP);
	d3dd->SetRenderState(D3DRS_CCW_STENCILZFAIL, D3DSTENCILOP_KEEP);
	d3dd->SetRenderState(D3DRS_CCW_STENCILPASS, D3DSTENCILOP_KEEP);
	d3dd->SetRenderState(D3DRS_CCW_STENCILFUNC, D3DCMP_ALWAYS);
	d3dd->SetRenderState(D3DRS_COLORWRITEENABLE1, 0x0000000f);
	d3dd->SetRenderState(D3DRS_COLORWRITEENABLE2, 0x0000000f);
	d3dd->SetRenderState(D3DRS_COLORWRITEENABLE3, 0x0000000f);
	d3dd->SetRenderState(D3DRS_BLENDFACTOR, 0xffffffff);
	d3dd->SetRenderState(D3DRS_SRGBWRITEENABLE, 0);
	d3dd->SetRenderState(D3DRS_DEPTHBIAS, 0);
	d3dd->SetRenderState(D3DRS_WRAP8, 0);
	d3dd->SetRenderState(D3DRS_WRAP9, 0);
	d3dd->SetRenderState(D3DRS_WRAP10, 0);
	d3dd->SetRenderState(D3DRS_WRAP11, 0);
	d3dd->SetRenderState(D3DRS_WRAP12, 0);
	d3dd->SetRenderState(D3DRS_WRAP13, 0);
	d3dd->SetRenderState(D3DRS_WRAP14, 0);
	d3dd->SetRenderState(D3DRS_WRAP15, 0);
	d3dd->SetRenderState(D3DRS_SEPARATEALPHABLENDENABLE, FALSE);
	d3dd->SetRenderState(D3DRS_SRCBLENDALPHA, D3DBLEND_ONE);
	d3dd->SetRenderState(D3DRS_DESTBLENDALPHA, D3DBLEND_ZERO);
	d3dd->SetRenderState(D3DRS_BLENDOPALPHA, D3DBLENDOP_ADD);
	d3dd->SetRenderState(D3DRS_DITHERENABLE, FALSE);
	d3dd->SetRenderState(D3DRS_VERTEXBLEND, D3DVBF_DISABLE);
	d3dd->SetRenderState(D3DRS_POINTSIZE, ONEf);
	d3dd->SetRenderState(D3DRS_POINTSCALEENABLE, FALSE);
	d3dd->SetRenderState(D3DRS_POINTSCALE_A, ONEf);
	d3dd->SetRenderState(D3DRS_POINTSCALE_B, ZEROf);
	d3dd->SetRenderState(D3DRS_POINTSCALE_C, ZEROf);
	d3dd->SetRenderState(D3DRS_INDEXEDVERTEXBLENDENABLE, FALSE);
	d3dd->SetRenderState(D3DRS_TWEENFACTOR, ZEROf);
	d3dd->SetRenderState(D3DRS_ANTIALIASEDLINEENABLE, FALSE);

	for(int i=0;i<4;i++) {
		d3dd->SetSamplerState(i, D3DSAMP_MINFILTER, D3DTEXF_LINEAR);
		d3dd->SetSamplerState(i, D3DSAMP_MAGFILTER, D3DTEXF_LINEAR);
		d3dd->SetSamplerState(i, D3DSAMP_MIPFILTER, D3DTEXF_NONE);
		d3dd->SetSamplerState(i, D3DSAMP_MIPMAPLODBIAS, 0);
		d3dd->SetSamplerState(i, D3DSAMP_MAXMIPLEVEL, 0);
		d3dd->SetSamplerState(i, D3DSAMP_MAXANISOTROPY, 1);
		d3dd->SetSamplerState(i, D3DSAMP_SRGBTEXTURE, 0);
		d3dd->SetSamplerState(i, D3DSAMP_ELEMENTINDEX, 0);
		d3dd->SetSamplerState(i, D3DSAMP_DMAPOFFSET, 0);
		d3dd->SetSamplerState(i, D3DSAMP_ADDRESSU, D3DTADDRESS_WRAP);
		d3dd->SetSamplerState(i, D3DSAMP_ADDRESSV, D3DTADDRESS_WRAP);
		d3dd->SetSamplerState(i, D3DSAMP_ADDRESSW, D3DTADDRESS_WRAP);
	}

	for(int i=0;i<4;i++) {
		d3dd->SetTextureStageState(i, D3DTSS_TEXCOORDINDEX, i);
		d3dd->SetTextureStageState(i, D3DTSS_COLOROP, i==0?D3DTOP_MODULATE:D3DTOP_DISABLE);
		d3dd->SetTextureStageState(i, D3DTSS_COLORARG1, D3DTA_TEXTURE);
		d3dd->SetTextureStageState(i, D3DTSS_COLORARG2, D3DTA_CURRENT);
		d3dd->SetTextureStageState(i, D3DTSS_ALPHAOP, i==0?D3DTOP_SELECTARG1:D3DTOP_DISABLE);
		d3dd->SetTextureStageState(i, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);
		d3dd->SetTextureStageState(i, D3DTSS_ALPHAARG2, D3DTA_CURRENT);
		d3dd->SetTextureStageState(i, D3DTSS_BUMPENVMAT00, ZEROf);
		d3dd->SetTextureStageState(i, D3DTSS_BUMPENVMAT01, ZEROf);
		d3dd->SetTextureStageState(i, D3DTSS_BUMPENVMAT10, ZEROf);
		d3dd->SetTextureStageState(i, D3DTSS_BUMPENVMAT11, ZEROf);
		d3dd->SetTextureStageState(i, D3DTSS_BUMPENVLSCALE, ZEROf);
		d3dd->SetTextureStageState(i, D3DTSS_BUMPENVLOFFSET, ZEROf);
		d3dd->SetTextureStageState(i, D3DTSS_COLORARG0, D3DTA_CURRENT);
		d3dd->SetTextureStageState(i, D3DTSS_ALPHAARG0, D3DTA_CURRENT);
		d3dd->SetTextureStageState(i, D3DTSS_RESULTARG, D3DTA_CURRENT);
		d3dd->SetTextureStageState(i, D3DTSS_CONSTANT, 0);
		d3dd->SetTextureStageState(i, D3DTSS_TEXTURETRANSFORMFLAGS, D3DTTFF_DISABLE);
	}

		D3DXMATRIX mat;
		D3DXMatrixIdentity(&mat);
		d3dd->SetTransform(D3DTS_TEXTURE0, &mat);
		d3dd->SetTransform(D3DTS_TEXTURE1, &mat);
		d3dd->SetTransform(D3DTS_TEXTURE2, &mat);
		d3dd->SetTransform(D3DTS_TEXTURE3, &mat);
}
